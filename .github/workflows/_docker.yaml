name: _docker

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      git-sha:
        type: string
        default: 'maybe-should-be-requried'
      image-tag:
        type: string
        required: true
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZ_APPINSIGHTS_CONNECTION_STRING:
        required: true
      AZ_DEFENDER_TOKEN:
        required: true
      SNYK_API_TOKEN:
        required: true

# ===============
#  Configuration
# ===============
env:
  acr-registry: cloudkubereviews
  image-name: cloudkubereviews.azurecr.io/frontend

jobs:
  # ========================
  #  DEV: build, scan, push
  # ========================
  build-and-push:
    if: inputs.environment == 'dev'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
    - uses: actions/checkout@v3
    - name: 'Azure Login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}

    - name: 'Container Registry - Login'
      run: az acr login --name ${{ env.acr-registry }}

    - name: 'Docker - Build'
      run: docker build -t ${{ env.image-name }}:${{ inputs.image-tag }} .

    # Can Snyk scan a Docker image before I push it?
    - uses: snyk/actions/docker@master
      name: Run Snyk Vulnerability Scan
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN }}
      with:
        image: ${{ env.image-name }}:${{ inputs.image-tag }}
        args: --file=Dockerfile --severity-threshold=high

    - name: 'Docker - Push'
      run: docker push ${{ env.image-name }}:${{ inputs.image-tag }}

    # # only works _after_ push ü§¶‚Äç‚ôÄÔ∏è
    # - uses: Azure/container-scan@v0
    #   name: 'Docker - Azure Defender Scan'
    #   continue-on-error: true
    #   id: container-scan
    #   with:
    #     image-name: ${{ env.image-name }}:${{ inputs.image-tag }}
    #     severity-threshold: WARN

    # - name: 'Defender Scan - post results to Azure' # per Docs must be _after_ push
    #   uses: Azure/publish-security-assessments@v0
    #   with:
    #     scan-results-path: ${{ steps.container-scan.outputs.scan-report-path }}
    #     connection-string: ${{ secrets.AZ_APPINSIGHTS_CONNECTION_STRING }}
    #     subscription-token: ${{ secrets.AZ_DEFENDER_TOKEN }}

    - name: 'Docker - Logout'
      run: docker logout


  # ==================
  #  STAGING: promote
  # ==================
  promote-to-staging:
    if: inputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}

    - run: az acr login --name ${{ env.acr-registry }}

    - name: 'Re-tag to Promote'
      run: |
        docker pull ${{ env.image-name }}:dev-${{ inputs.git-sha }}
        docker tag ${{ env.image-name }}:dev-${{ inputs.git-sha }} ${{ env.image-name }}:${{ inputs.image-tag }}
        docker push ${{ env.image-name }}:${{ inputs.image-tag }}

    - run: docker logout
